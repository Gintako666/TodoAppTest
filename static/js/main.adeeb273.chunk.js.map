{"version":3,"sources":["hooks/reduxHooks.ts","features/todos.ts","components/Input.tsx","components/AddTodoForm.tsx","features/modalTodo.ts","components/TodoCheckbox.tsx","components/ModalTodo.tsx","components/TodoList.tsx","App.tsx","app/store.ts","index.tsx"],"names":["useAppSelector","useSelector","useAppDispatch","useDispatch","todosSlice","createSlice","name","initialState","todos","reducers","addTodos","value","action","payload","editTodo","map","todo","id","actions","Input","setValue","placeholder","error","className","classNames","onChange","e","target","type","todoId","AddTodoForm","dispatch","useState","valueTitle","setValueTitle","valueDescription","setValueDescription","title","description","inputErrors","setInputErrors","useEffect","prev","handleSubmit","useCallback","completed","addNewTodo","onClick","eventTodoSlice","isOpen","selectedTodo","setSelectTodo","setOpenForm","TodoCheckbox","changeableTodo","useMemo","modalTodoActions","todosActions","ModalTodo","state","modalTodo","TodoList","aria-hidden","App","store","configureStore","reducer","todosReduser","modalTodoReduser","ReactDOM","render","document","getElementById"],"mappings":"6NAGaA,G,MAAkDC,KAClDC,EAAoCC,I,6BCC3CC,EAAaC,YAAY,CAC7BC,KAAM,QACNC,aAJsC,CAAEC,MAAO,IAK/CC,SAAU,CACRC,SAAU,SAACC,EAAOC,GAChB,MAAO,CAAEJ,MAAM,GAAD,mBAAMG,EAAMH,OAAZ,CAAmBI,EAAOC,YAE1CC,SAAU,SAACH,EAAOC,GAChB,MAAO,CACLJ,MAAOG,EAAMH,MAAMO,KAAI,SAACC,GACtB,OAAIA,EAAKC,KAAOL,EAAOC,QAAQI,GACtBL,EAAOC,QAGTG,UAOFE,EAAYd,EAAZc,QAEAd,IAAf,Q,wBClBae,EAAyB,SAAC,GAKhC,IAJLR,EAII,EAJJA,MACAS,EAGI,EAHJA,SACAC,EAEI,EAFJA,YACAC,EACI,EADJA,MAEA,OACE,qBAAKC,UAAWC,IACd,QACA,CAAE,eAAgBF,IAFpB,SAKE,uBACEC,UAAWC,IACT,cACA,CAAE,qBAAsBF,IAE1BX,MAAOA,EACPc,SAAU,SAACC,GACTN,EAASM,EAAEC,OAAOhB,QAEpBiB,KAAK,OACLP,YAAaA,OC3BjBQ,EAAS,EAEAC,EAAc,WACzB,IAAMC,EAAW7B,IACjB,EAAoC8B,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgDF,mBAAS,IAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAAsCJ,mBAAS,CAAEK,OAAO,EAAOC,aAAa,IAA5E,mBAAOC,EAAP,KAAoBC,EAApB,KAEAC,qBAAU,WACRD,GAAe,SAAAE,GAAI,kCAAUA,GAAV,IAAgBJ,aAAa,SAC/C,CAACH,IAEJM,qBAAU,WACRD,GAAe,SAAAE,GAAI,kCAAUA,GAAV,IAAgBL,OAAO,SACzC,CAACJ,IAEJ,IAAMU,EAAeC,uBAAY,SAACP,EAAOC,GACvCP,EAASb,EAAQR,SAAS,CACxB2B,QACAC,cACAO,WAAW,EACX5B,GAAIY,GAAU,KAGhBO,EAAoB,IACpBF,EAAc,IACdM,EAAe,CACbH,OAAO,EACPC,aAAa,MAEd,IAEGQ,EAAaF,uBAAY,WACxBX,GACHO,GAAe,SAAAE,GAAI,kCAAUA,GAAV,IAAgBL,OAAO,OAGvCF,GACHK,GAAe,SAAAE,GAAI,kCAAUA,GAAV,IAAgBJ,aAAa,OAG9CL,GAAcE,GAChBQ,EAAaV,EAAYE,KAE1B,CAACF,EAAYE,IAEhB,OACE,uBAAMZ,UAAU,gBAAhB,UACE,cAAC,EAAD,CAAOD,MAAOiB,EAAYF,MAAO1B,MAAOsB,EAAYb,SAAUc,EAAeb,YAAY,UACzF,cAAC,EAAD,CAAOC,MAAOiB,EAAYD,YAAa3B,MAAOwB,EAAkBf,SAAUgB,EAAqBf,YAAY,gBAC3G,wBACEE,UAAU,wBACVK,KAAK,SACLmB,QAASD,EAHX,0BC5CAE,EAAiB3C,YAAY,CACjCC,KAAM,YACNC,aAPE,CACF0C,QAAQ,EACRC,aAAc,MAMdzC,SAAU,CACR0C,cAAe,SAACxC,EAAOC,GACrB,OAAO,2BACFD,GADL,IAEEuC,aAActC,EAAOC,WAGzBuC,YAAa,SAACzC,EAAOC,GACnB,OAAO,2BACFD,GADL,IAEEsC,OAAQrC,EAAOC,cAMRK,EAAY8B,EAAZ9B,QAEA8B,IAAf,QCrBaK,EAAgC,SAAC,GAAc,IAAZrC,EAAW,EAAXA,KACxCe,EAAW7B,IAEXoD,EAAiBC,mBAAQ,8BAAC,eAAWvC,GAAZ,IAAkB6B,WAAY7B,EAAK6B,cAAc,CAAC7B,IAEjF,OACE,wBACEY,KAAK,SACLL,UAAWC,IACT,iBACA,CAAE,4BAA6BR,EAAK6B,YAEtCE,QAAS,WACPhB,EAASyB,EAAiBL,cAAcG,IACxCvB,EAAS0B,EAAa3C,SAASwC,QCpB1BI,EAAY,WACvB,IAAM3B,EAAW7B,IAETgD,EAAiBlD,GAAe,SAAA2D,GAAK,OAAIA,EAAMC,aAA/CV,aAER,OACE,qBAAK3B,UAAU,aAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,0BAAd,gBAAyC2B,QAAzC,IAAyCA,OAAzC,EAAyCA,EAAcb,QACvD,mBAAGd,UAAU,yBAAb,0BACA,mBAAGA,UAAU,yBAAb,gBAAuC2B,QAAvC,IAAuCA,OAAvC,EAAuCA,EAAcZ,cACrD,sBAAKf,UAAU,6BAAf,oBAEE,cAAC,EAAD,CAAcP,KAAMkC,OAGtB,wBACE3B,UAAU,2BACVK,KAAK,SACLmB,QAAS,WACPhB,EAASyB,EAAiBJ,aAAY,KAJ1C,yBCjBKS,EAAW,WACtB,IAAM9B,EAAW7B,IAETM,EAAUR,GAAe,SAAA2D,GAAK,OAAIA,EAAMnD,SAAxCA,MAER,OACE,qBAAIe,UAAU,YAAd,UACE,qBAAIA,UAAU,kBAAd,UACE,qBAAKA,UAAU,wBAAf,SAAuC,qCACvC,qBAAKA,UAAU,wBAAf,SAAuC,wCACvC,qBAAKA,UAAU,wBAAf,SAAuC,8CACvC,qBAAKA,UAAU,wBAAf,SAAuC,4CAExCf,EAAMO,KAAI,SAAAC,GACT,OACE,qBAEEO,UAAU,kBACVuC,eAAA,EACAf,QAAS,WACPhB,EAASyB,EAAiBJ,aAAY,IACtCrB,EAASyB,EAAiBL,cAAcnC,KAN5C,UASE,qBAAKO,UAAU,wBAAf,SAAwCP,EAAKC,KAC7C,qBAAKM,UAAU,wBAAf,SAAwCP,EAAKqB,QAC7C,qBAAKd,UAAU,wBAAf,SAAwCP,EAAKsB,cAC7C,qBAAKf,UAAU,wBAAf,SACGP,EAAK6B,UAAY,YAAc,kBAZ7B7B,EAAKC,WCEP8C,EAfO,WACpB,IAAQd,EAAWjD,GAAe,SAAA2D,GAAK,OAAIA,EAAMC,aAAzCX,OAER,OACE,qBAAK1B,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACC0B,GAAU,cAAC,EAAD,UCDJe,EAVDC,YAAe,CAC3BC,QAAS,CACP1D,MAAO2D,EACPP,UAAWQ,KCCfC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,QAIJO,SAASC,eAAe,W","file":"static/js/main.adeeb273.chunk.js","sourcesContent":["import { useDispatch, TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from '../app/store';\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\nexport const useAppDispatch: () => AppDispatch = useDispatch;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Todo } from '../types/Todo';\n\nconst initialState: { todos: Todo[] } = { todos: [] };\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState,\n  reducers: {\n    addTodos: (value, action: PayloadAction<Todo>) => {\n      return { todos: [...value.todos, action.payload] };\n    },\n    editTodo: (value, action: PayloadAction<Todo>) => {\n      return {\n        todos: value.todos.map((todo) => {\n          if (todo.id === action.payload.id) {\n            return action.payload;\n          }\n\n          return todo;\n        }),\n      };\n    },\n  },\n});\n\nexport const { actions } = todosSlice;\n\nexport default todosSlice.reducer;\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  value: string,\n  setValue: React.Dispatch<React.SetStateAction<string>>,\n  placeholder: string,\n  error: boolean,\n};\n\nexport const Input: React.FC<Props> = ({\n  value,\n  setValue,\n  placeholder,\n  error,\n}) => {\n  return (\n    <div className={classNames(\n      'input',\n      { 'input--error': error },\n    )}\n    >\n      <input\n        className={classNames(\n          'input__item',\n          { 'input__item--error': error },\n        )}\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value);\n        }}\n        type=\"text\"\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { actions } from '../features/todos';\nimport { useAppDispatch } from '../hooks/reduxHooks';\nimport { Input } from './Input';\n\nlet todoId = 0;\n\nexport const AddTodoForm = () => {\n  const dispatch = useAppDispatch();\n  const [valueTitle, setValueTitle] = useState('');\n  const [valueDescription, setValueDescription] = useState('');\n  const [inputErrors, setInputErrors] = useState({ title: false, description: false });\n\n  useEffect(() => {\n    setInputErrors(prev => ({ ...prev, description: false }));\n  }, [valueDescription]);\n\n  useEffect(() => {\n    setInputErrors(prev => ({ ...prev, title: false }));\n  }, [valueTitle]);\n\n  const handleSubmit = useCallback((title, description) => {\n    dispatch(actions.addTodos({\n      title,\n      description,\n      completed: false,\n      id: todoId += 1,\n    }));\n\n    setValueDescription('');\n    setValueTitle('');\n    setInputErrors({\n      title: false,\n      description: false,\n    });\n  }, []);\n\n  const addNewTodo = useCallback(() => {\n    if (!valueTitle) {\n      setInputErrors(prev => ({ ...prev, title: true }));\n    }\n\n    if (!valueDescription) {\n      setInputErrors(prev => ({ ...prev, description: true }));\n    }\n\n    if (valueTitle && valueDescription) {\n      handleSubmit(valueTitle, valueDescription);\n    }\n  }, [valueTitle, valueDescription]);\n\n  return (\n    <form className=\"add-todo-form\">\n      <Input error={inputErrors.title} value={valueTitle} setValue={setValueTitle} placeholder=\"Title\" />\n      <Input error={inputErrors.description} value={valueDescription} setValue={setValueDescription} placeholder=\"Description\" />\n      <button\n        className=\"add-todo-form__button\"\n        type=\"button\"\n        onClick={addNewTodo}\n      >\n        Add todo\n\n      </button>\n    </form>\n  );\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Todo } from '../types/Todo';\n\nconst initialState: {\n  isOpen: boolean\n  selectedTodo: Todo | null\n} = {\n  isOpen: false,\n  selectedTodo: null,\n};\n\nconst eventTodoSlice = createSlice({\n  name: 'EventTodo',\n  initialState,\n  reducers: {\n    setSelectTodo: (value, action: PayloadAction<Todo | null>) => {\n      return {\n        ...value,\n        selectedTodo: action.payload,\n      };\n    },\n    setOpenForm: (value, action: PayloadAction<boolean>) => {\n      return {\n        ...value,\n        isOpen: action.payload,\n      };\n    },\n  },\n});\n\nexport const { actions } = eventTodoSlice;\n\nexport default eventTodoSlice.reducer;\n","import classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { actions as modalTodoActions } from '../features/modalTodo';\nimport { actions as todosActions } from '../features/todos';\nimport { useAppDispatch } from '../hooks/reduxHooks';\nimport { Todo } from '../types/Todo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoCheckbox: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n\n  const changeableTodo = useMemo(() => ({ ...todo, completed: !todo.completed }), [todo]);\n\n  return (\n    <button\n      type=\"button\"\n      className={classNames(\n        'todo-check-box',\n        { 'todo-check-box--completed': todo.completed },\n      )}\n      onClick={() => {\n        dispatch(modalTodoActions.setSelectTodo(changeableTodo));\n        dispatch(todosActions.editTodo(changeableTodo));\n      }}\n    >\n    </button>\n  );\n};\n","import React from 'react';\nimport { actions as modalTodoActions } from '../features/modalTodo';\nimport { useAppDispatch, useAppSelector } from '../hooks/reduxHooks';\nimport { TodoCheckbox } from './TodoCheckbox';\n\nexport const ModalTodo = () => {\n  const dispatch = useAppDispatch();\n\n  const { selectedTodo } = useAppSelector(state => state.modalTodo);\n\n  return (\n    <div className=\"modal-todo\">\n      <div className=\"modal-todo__item\">\n        <h1 className=\"modal-todo__item__title\">{selectedTodo?.title}</h1>\n        <b className=\"modal-todo__item__text\">Description:</b>\n        <p className=\"modal-todo__item__text\">{selectedTodo?.description}</p>\n        <div className=\"modal-todo__item__checkbox\">\n          Status:\n          <TodoCheckbox todo={selectedTodo!} />\n\n        </div>\n        <button\n          className=\"modal-todo__item__button\"\n          type=\"button\"\n          onClick={() => {\n            dispatch(modalTodoActions.setOpenForm(false));\n          }}\n        >\n          Close\n\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { actions as modalTodoActions } from '../features/modalTodo';\nimport { useAppDispatch, useAppSelector } from '../hooks/reduxHooks';\n\nexport const TodoList = () => {\n  const dispatch = useAppDispatch();\n\n  const { todos } = useAppSelector(state => state.todos);\n\n  return (\n    <ul className=\"todo-list\">\n      <li className=\"todo-list__item\">\n        <div className=\"todo-list__item__part\"><b>ID</b></div>\n        <div className=\"todo-list__item__part\"><b>TITLE</b></div>\n        <div className=\"todo-list__item__part\"><b>DESCRIPTION</b></div>\n        <div className=\"todo-list__item__part\"><b>STATUS</b></div>\n      </li>\n      {todos.map(todo => {\n        return (\n          <li\n            key={todo.id}\n            className=\"todo-list__item\"\n            aria-hidden\n            onClick={() => {\n              dispatch(modalTodoActions.setOpenForm(true));\n              dispatch(modalTodoActions.setSelectTodo(todo));\n            }}\n          >\n            <div className=\"todo-list__item__part\">{todo.id}</div>\n            <div className=\"todo-list__item__part\">{todo.title}</div>\n            <div className=\"todo-list__item__part\">{todo.description}</div>\n            <div className=\"todo-list__item__part\">\n              {todo.completed ? 'Completed' : 'In progress'}\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { useAppSelector } from './hooks/reduxHooks';\nimport { AddTodoForm } from './components/AddTodoForm';\nimport { ModalTodo } from './components/ModalTodo';\nimport { TodoList } from './components/TodoList';\n\nconst App: React.FC = () => {\n  const { isOpen } = useAppSelector(state => state.modalTodo);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <AddTodoForm />\n        <TodoList />\n        {isOpen && <ModalTodo />}\n      </div>\n\n    </div>\n  );\n};\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport todosReduser from '../features/todos';\nimport modalTodoReduser from '../features/modalTodo';\n\nconst store = configureStore({\n  reducer: {\n    todos: todosReduser,\n    modalTodo: modalTodoReduser,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}